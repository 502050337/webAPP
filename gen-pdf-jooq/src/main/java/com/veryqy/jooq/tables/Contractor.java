/*
 * This file is generated by jOOQ.
*/
package com.veryqy.jooq.tables;


import com.veryqy.jooq.Indexes;
import com.veryqy.jooq.Keys;
import com.veryqy.jooq.Public;
import com.veryqy.jooq.tables.records.ContractorRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contractor extends TableImpl<ContractorRecord> {

    private static final long serialVersionUID = -930095371;

    /**
     * The reference instance of <code>public.contractor</code>
     */
    public static final Contractor CONTRACTOR = new Contractor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContractorRecord> getRecordType() {
        return ContractorRecord.class;
    }

    /**
     * The column <code>public.contractor.agreement_id</code>.
     */
    public final TableField<ContractorRecord, String> AGREEMENT_ID = createField("agreement_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.contractor.id</code>.
     */
    public final TableField<ContractorRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.contractor.name</code>.
     */
    public final TableField<ContractorRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.contractor.person_name</code>.
     */
    public final TableField<ContractorRecord, String> PERSON_NAME = createField("person_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.contractor.person_idno</code>.
     */
    public final TableField<ContractorRecord, String> PERSON_IDNO = createField("person_idno", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.contractor.josn</code>.
     */
    public final TableField<ContractorRecord, String> JOSN = createField("josn", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contractor.create_date</code>.
     */
    public final TableField<ContractorRecord, Timestamp> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.contractor.create_by</code>.
     */
    public final TableField<ContractorRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.contractor</code> table reference
     */
    public Contractor() {
        this(DSL.name("contractor"), null);
    }

    /**
     * Create an aliased <code>public.contractor</code> table reference
     */
    public Contractor(String alias) {
        this(DSL.name(alias), CONTRACTOR);
    }

    /**
     * Create an aliased <code>public.contractor</code> table reference
     */
    public Contractor(Name alias) {
        this(alias, CONTRACTOR);
    }

    private Contractor(Name alias, Table<ContractorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contractor(Name alias, Table<ContractorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONTRACTOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContractorRecord> getPrimaryKey() {
        return Keys.CONTRACTOR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContractorRecord>> getKeys() {
        return Arrays.<UniqueKey<ContractorRecord>>asList(Keys.CONTRACTOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contractor as(String alias) {
        return new Contractor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contractor as(Name alias) {
        return new Contractor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contractor rename(String name) {
        return new Contractor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contractor rename(Name name) {
        return new Contractor(name, null);
    }
}
