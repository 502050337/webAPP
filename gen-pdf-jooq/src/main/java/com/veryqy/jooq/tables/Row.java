/*
 * This file is generated by jOOQ.
*/
package com.veryqy.jooq.tables;


import com.veryqy.jooq.Indexes;
import com.veryqy.jooq.Keys;
import com.veryqy.jooq.Public;
import com.veryqy.jooq.tables.records.RowRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Row extends TableImpl<RowRecord> {

    private static final long serialVersionUID = 826393519;

    /**
     * The reference instance of <code>public.row</code>
     */
    public static final Row ROW = new Row();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RowRecord> getRecordType() {
        return RowRecord.class;
    }

    /**
     * The column <code>public.row.seq</code>.
     */
    public final TableField<RowRecord, String> SEQ = createField("seq", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.id</code>.
     */
    public final TableField<RowRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.row.subcategory</code>.
     */
    public final TableField<RowRecord, String> SUBCATEGORY = createField("subcategory", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.name</code>.
     */
    public final TableField<RowRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.unit</code>.
     */
    public final TableField<RowRecord, String> UNIT = createField("unit", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.remark</code>.
     */
    public final TableField<RowRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.subname</code>.
     */
    public final TableField<RowRecord, String> SUBNAME = createField("subname", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.price</code>.
     */
    public final TableField<RowRecord, String> PRICE = createField("price", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.count</code>.
     */
    public final TableField<RowRecord, String> COUNT = createField("count", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.checked</code>.
     */
    public final TableField<RowRecord, Boolean> CHECKED = createField("checked", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.row.total</code>.
     */
    public final TableField<RowRecord, String> TOTAL = createField("total", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.order_id</code>.
     */
    public final TableField<RowRecord, String> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.row.commodity_id</code>.
     */
    public final TableField<RowRecord, String> COMMODITY_ID = createField("commodity_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.row</code> table reference
     */
    public Row() {
        this(DSL.name("row"), null);
    }

    /**
     * Create an aliased <code>public.row</code> table reference
     */
    public Row(String alias) {
        this(DSL.name(alias), ROW);
    }

    /**
     * Create an aliased <code>public.row</code> table reference
     */
    public Row(Name alias) {
        this(alias, ROW);
    }

    private Row(Name alias, Table<RowRecord> aliased) {
        this(alias, aliased, null);
    }

    private Row(Name alias, Table<RowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RowRecord> getPrimaryKey() {
        return Keys.ROW_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RowRecord>> getKeys() {
        return Arrays.<UniqueKey<RowRecord>>asList(Keys.ROW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row as(String alias) {
        return new Row(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row as(Name alias) {
        return new Row(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Row rename(String name) {
        return new Row(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Row rename(Name name) {
        return new Row(name, null);
    }
}
